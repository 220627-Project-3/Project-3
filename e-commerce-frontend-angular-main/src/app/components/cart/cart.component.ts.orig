import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { ToastrService } from 'ngx-toastr';
import { Product } from 'src/app/models/product';
import { ProductService } from 'src/app/services/product.service';
import { AuthService } from 'src/app/services/auth.service';
import { User } from 'src/app/models/user';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.css'],
})
export class CartComponent implements OnInit {
  products: {
    product: Product;
    quantity: number;
  }[] = [];
  totalPrice!: number;
  cartProducts: Product[] = [];
  currentUserInfo: User = {
    id: 0,
    email: '',
    firstName: '',
    lastName: '',
    password: '',
    isAdmin: false,
  };

  constructor(
    private productService: ProductService,
    private router: Router,
    private toastr: ToastrService,
    private authService: AuthService
  ) {}

  headingToCheckout() {
    this.toastr.success('', 'Heading to Checkout');
  }
  ngOnInit(): void {
    this.productService.initializeCart();
    this.productService.getDetails().subscribe((cart) => {
      this.products = cart.products;
      this.products.forEach((element) =>
        this.cartProducts.push(element.product)
      );
      this.totalPrice = +Number(cart.totalPrice).toFixed(2);
    });
    this.productService
      .getCart()
      .subscribe((data) => (this.totalPrice = data.totalPrice));
  }

  emptyCart(): void {
    // this.authService
    //   .getUser()
    //   .subscribe((user) => {
    //     this.products.forEach((product) => {
    //       this.authService
    //         .getUser()
    //         .subscribe((user) => {
    //           let x = this.productService.removeItem(
    //             user.id,
    //             product.quantity,
    //             product.product.id
    //           );
    //           x.subscribe((data) => console.log(data));
    //           this.router.navigate(['/home']);
    //         })
    //         .unsubscribe();
    //     });
    //   })
    //   .unsubscribe();
    this.productService.emptyCart(this.currentUserInfo.id).subscribe({
      next: (data) => {
        console.log('%c[' + data + ']', 'color: blue');
        let cart = {
          cartCount: 0,
          products: [],
          totalPrice: 0.0,
        };
        this.productService.setDetails(cart);
        this.toastr.info('', 'Your Cart Is Now Empty');
      },
      error: (data) => {
        console.log('%c[' + data + ']', 'color: red');
      },
    });
  }

<<<<<<< HEAD
=======
  removeItem(id: number, qty: string) {
    // console.log(qty);

    let index = this.products.findIndex((e) => e.product.id === id);
    //if quantity input is empty, remove 1 of the product
    if (qty == '') {
      if (index !== -1) {
        this.products[index].quantity = this.products[index].quantity - 1;
        this.totalPrice = this.totalPrice - this.products[index].product.price;
        if (this.products[index].quantity < 1) {
          this.products.splice(index, 1);
        }

        this.authService
          .getUser()
          .subscribe((user) => {
            let x = this.productService.removeItem(user.id, 1, id);
            // x.subscribe(data => console.log(data));
          })
          .unsubscribe();
      }
    }
    //if it is not empty, convert to number and continue
    else {
      let qtyNum: number = +qty;
      //if we can remove the specified amount - do it
      if (qtyNum > 0 && qtyNum <= this.products[index].quantity) {
        if (index !== -1) {
          this.products[index].quantity =
            this.products[index].quantity - qtyNum;
          this.totalPrice =
            this.totalPrice - qtyNum * this.products[index].product.price;
          if (this.products[index].quantity < 1) {
            this.products.splice(index, 1);
          }

          this.authService
            .getUser()
            .subscribe((user) => {
              let x = this.productService.removeItem(user.id, qtyNum, id);
              // x.subscribe(data => console.log(data));
            })
            .unsubscribe();
        }
      }
      //input is negative or greater than what we have
      else {
        console.log('Invalid Input');
      }
    }
    //update cart
    let count = 0;
    this.products.forEach((e) => (count = count + e.quantity));
    this.totalPrice = +Number(this.totalPrice).toFixed(2);
    let cart = {
      cartCount: count,
      products: this.products,
      totalPrice: this.totalPrice,
    };
    this.productService.setDetails(cart);
  }

  updateItem(productid: number, amount: string) {
    this.productService
      .updateCartItem(this.currentUserInfo.id, parseInt(amount), productid)
      .subscribe({
        next: (data) => {
          console.log(data);
          let totalPrice = 0;
          for (let elem of data) {
            totalPrice += (elem.quantity * elem.product.price);
          }
          let cart = {
            cartCount: data.length,
            products: data,
            totalPrice: totalPrice,
          };
          this.productService.setDetails(cart);
          if(parseInt(amount) > 0) {
            this.toastr.success('Successfully update quantity', 'Success');
          } else {
            this.toastr.success('Successfully removed item from cart', 'Success');
          }

        },
        error: (data) => {
          console.log(data);
        },
      });
  }

  getCurrentUserInfo(value: any) {
    this.currentUserInfo = value;
  }
>>>>>>> origin/development
}
